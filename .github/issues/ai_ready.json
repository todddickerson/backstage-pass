[{"assignees":[],"body":"**User Story**: As a platform operator I want the application to be secure so that user data is protected\n\n**Acceptance Criteria:**\n- [ ] All OWASP Top 10 vulnerabilities addressed\n- [ ] Security headers configured\n- [ ] Input validation on all forms\n- [ ] SQL injection prevention verified\n- [ ] XSS protection enabled\n- [ ] CSRF tokens properly implemented\n- [ ] Rate limiting on all endpoints\n- [ ] Secure session management\n- [ ] Encrypted sensitive data\n- [ ] Security audit passed\n\n**Security Checklist:**\n\n### Authentication & Authorization:\n- [ ] Strong password requirements (handled by Devise)\n- [ ] Account lockout after failed attempts\n- [ ] Session timeout configured\n- [ ] Secure password reset flow\n- [ ] Two-factor authentication (optional)\n- [ ] OAuth providers secured\n- [ ] API token rotation\n\n### Data Protection:\n- [ ] PII encrypted at rest\n- [ ] SSL/TLS enforced (force_ssl)\n- [ ] Secure cookies (httponly, secure, samesite)\n- [ ] Database encryption for sensitive fields\n- [ ] File upload validation\n- [ ] S3 bucket policies configured\n- [ ] Backup encryption\n\n### Security Headers:\n```ruby\n# config/application.rb\nconfig.force_ssl = true\n\n# Security headers middleware\nconfig.middleware.use Rack::Protection\nconfig.middleware.use SecureHeaders::Middleware\n\nSecureHeaders::Configuration.default do |config|\n  config.x_frame_options = 'DENY'\n  config.x_content_type_options = 'nosniff'\n  config.x_xss_protection = '1; mode=block'\n  config.x_download_options = 'noopen'\n  config.x_permitted_cross_domain_policies = 'none'\n  config.referrer_policy = %w[origin-when-cross-origin strict-origin-when-cross-origin]\n  \n  config.csp = {\n    default_src: %w['self'],\n    font_src: %w['self' data:],\n    img_src: %w['self' data: https:],\n    script_src: %w['self' 'unsafe-inline'],\n    style_src: %w['self' 'unsafe-inline'],\n    connect_src: %w['self' wss: https:]\n  }\nend\n```\n\n### Input Validation:\n- [ ] Sanitize all user input\n- [ ] Parameterized queries only\n- [ ] File type validation for uploads\n- [ ] Size limits on uploads\n- [ ] Rate limiting on forms\n- [ ] CAPTCHA on public forms\n\n### API Security:\n- [ ] API authentication required\n- [ ] Rate limiting per API key\n- [ ] Request signing for webhooks\n- [ ] CORS properly configured\n- [ ] GraphQL query depth limiting\n- [ ] API versioning strategy\n\n### Infrastructure Security:\n- [ ] Environment variables for secrets\n- [ ] No secrets in code repository\n- [ ] Database connection encryption\n- [ ] Redis password protected\n- [ ] VPC/private networking where applicable\n- [ ] WAF rules configured (Cloudflare)\n\n### Monitoring & Compliance:\n- [ ] Security event logging\n- [ ] Failed login monitoring\n- [ ] Audit trail for sensitive actions\n- [ ] GDPR compliance (data deletion)\n- [ ] Privacy policy updated\n- [ ] Terms of service updated\n\n### Third-party Security:\n- [ ] Stripe PCI compliance\n- [ ] LiveKit secure room creation\n- [ ] GetStream.io token validation\n- [ ] OAuth redirect URI validation\n- [ ] Webhook signature verification\n\n### Specific Vulnerabilities to Check:\n- [ ] Mass assignment protection\n- [ ] Open redirects prevented\n- [ ] Directory traversal blocked\n- [ ] Command injection impossible\n- [ ] XXE attacks prevented\n- [ ] Insecure deserialization fixed\n\n### Security Testing:\n- [ ] Run Brakeman security scanner\n- [ ] Run bundler-audit for gem vulnerabilities  \n- [ ] Penetration testing performed\n- [ ] Security review of JavaScript dependencies\n- [ ] Mobile app security audit\n\n### Code Patterns to Implement:\n```ruby\n# Strong parameters everywhere\ndef space_params\n  params.require(:space).permit(:name, :description)\nend\n\n# Secure file uploads\nclass StreamUploader < ApplicationUploader\n  def extension_allowlist\n    %w[jpg jpeg png gif mp4 webm]\n  end\n  \n  def size_range\n    1..100.megabytes\n  end\nend\n\n# Rate limiting\nclass ApplicationController\n  rate_limit to: 100, within: 1.minute\nend\n\n# Secure API tokens\nclass ApiToken\n  has_secure_token :authentication_token\n  \n  def rotate\\!\n    regenerate_authentication_token\n  end\nend\n```\n\n### Emergency Response Plan:\n- [ ] Security incident response procedure\n- [ ] Data breach notification process\n- [ ] Vulnerability disclosure policy\n- [ ] Security contact information\n- [ ] Backup restoration tested","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxIA","name":"ai/ready","description":"Ready for AI implementation","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKady0g","name":"priority/critical","description":"Blocking issues","color":"FF0000"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"},{"id":"LA_kwDOPu35oc8AAAACKad1Ww","name":"sprint/week-4","description":"Week 4 sprint","color":"FBCA04"}],"milestone":{"number":4,"title":"Week 4: Polish","description":"Testing, documentation, Hotwire Native, production prep.","dueOn":"2025-10-13T00:00:00Z"},"number":21,"title":"STORY 17: Security Hardening - Production Security Checklist"},{"assignees":[],"body":"**User Story**: As a user I want the platform to be fast and responsive so that I have a great experience\n\n**Acceptance Criteria:**\n- [ ] Page load time < 2 seconds\n- [ ] Time to Interactive < 3 seconds\n- [ ] Lighthouse score > 90\n- [ ] Database queries optimized (no N+1)\n- [ ] Proper caching implemented\n- [ ] CDN configured for assets\n- [ ] Image optimization pipeline\n- [ ] WebSocket connection pooling\n- [ ] Mobile performance optimized\n\n**Performance Targets:**\n\n### Frontend Performance:\n- [ ] Bundle size < 200KB gzipped\n- [ ] Lazy loading for images\n- [ ] Code splitting implemented\n- [ ] Turbo cache configured\n- [ ] Stimulus controllers optimized\n- [ ] CSS purged of unused styles\n- [ ] Web fonts optimized\n- [ ] Service worker for offline\n\n### Backend Performance:\n- [ ] Database indexes optimized\n- [ ] Query performance < 50ms\n- [ ] API response time < 200ms\n- [ ] Background job queuing\n- [ ] Connection pooling configured\n- [ ] Memory usage optimized\n- [ ] Sidekiq concurrency tuned\n\n### Database Optimizations:\n```ruby\n# Add missing indexes\nadd_index :access_passes, [:user_id, :status]\nadd_index :streams, [:experience_id, :status]\nadd_index :spaces, :slug\nadd_index :experiences, [:space_id, :experience_type]\n\n# Eager loading to prevent N+1\nSpace.includes(:experiences, :access_passes)\nStream.includes(experience: :space)\n\n# Counter caches\nadd_column :spaces, :experiences_count, :integer, default: 0\nadd_column :experiences, :streams_count, :integer, default: 0\n```\n\n### Caching Strategy:\n- [ ] Fragment caching for views\n- [ ] Russian doll caching for nested resources\n- [ ] API response caching\n- [ ] Redis caching for sessions\n- [ ] CDN caching for assets\n- [ ] Edge caching with Cloudflare\n\n### Real-time Performance:\n- [ ] LiveKit connection optimization\n- [ ] GetStream.io connection pooling\n- [ ] WebSocket message batching\n- [ ] Presence updates throttled\n- [ ] Chat pagination implemented\n\n### Mobile Optimizations:\n- [ ] Adaptive bitrate for video\n- [ ] Image srcset for responsive images\n- [ ] Touch gesture optimization\n- [ ] Reduced motion support\n- [ ] Battery usage optimization\n\n### Monitoring & Metrics:\n- [ ] APM tool configured (New Relic/Scout)\n- [ ] Custom performance metrics\n- [ ] Real User Monitoring (RUM)\n- [ ] Database query analysis\n- [ ] Memory profiling\n- [ ] Load testing completed\n\n### Load Testing Scenarios:\n1. 1000 concurrent viewers on single stream\n2. 100 simultaneous stream hosts\n3. 10,000 chat messages per minute\n4. 500 purchases per minute\n5. Mobile app with poor network\n\n### Tools to Use:\n- Bullet gem for N+1 detection\n- rack-mini-profiler for development\n- derailed_benchmarks for memory analysis\n- Apache Bench for load testing\n- Lighthouse CI for frontend metrics\n\n### Specific Optimizations:\n- [ ] Optimize Space#show query (currently 15+ queries)\n- [ ] Implement GraphQL for mobile API\n- [ ] Add pagination to all index pages\n- [ ] Implement infinite scroll for chat\n- [ ] Optimize image uploads with ActiveStorage\n- [ ] Configure Sidekiq for optimal throughput\n- [ ] Implement database connection pooling\n- [ ] Add Redis cache warming","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxIA","name":"ai/ready","description":"Ready for AI implementation","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKadzAg","name":"priority/high","description":"Important","color":"FFA500"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"},{"id":"LA_kwDOPu35oc8AAAACKad1Ww","name":"sprint/week-4","description":"Week 4 sprint","color":"FBCA04"}],"milestone":{"number":4,"title":"Week 4: Polish","description":"Testing, documentation, Hotwire Native, production prep.","dueOn":"2025-10-13T00:00:00Z"},"number":20,"title":"STORY 16: Performance Optimization - Speed & Scalability"},{"assignees":[],"body":"**User Story**: As a developer or user I want comprehensive documentation so that I can understand and use the platform effectively\n\n**Acceptance Criteria:**\n- [ ] README.md with setup instructions\n- [ ] API documentation (OpenAPI/Swagger)\n- [ ] User guide for creators\n- [ ] User guide for viewers\n- [ ] Developer documentation\n- [ ] Mobile app setup guides\n- [ ] Deployment guide\n- [ ] Contributing guidelines\n\n**Documentation Structure:**\n\n### 1. README.md (Root)\n- [ ] Project overview and value proposition\n- [ ] Key features list\n- [ ] Technology stack\n- [ ] Quick start guide\n- [ ] Environment setup\n- [ ] Running locally with bin/dev\n- [ ] Testing instructions\n- [ ] Deployment overview\n- [ ] License and credits\n\n### 2. Creator Documentation (docs/creators/)\n- [ ] Getting started guide\n- [ ] Setting up your Space\n- [ ] Creating Access Passes\n- [ ] Pricing strategies\n- [ ] Hosting live streams\n- [ ] Managing chat and moderation\n- [ ] Analytics and insights\n- [ ] Payment and payouts\n\n### 3. Viewer Documentation (docs/viewers/)\n- [ ] How to purchase Access Passes\n- [ ] Joining live streams\n- [ ] Using chat features\n- [ ] Mobile app installation\n- [ ] Account management\n- [ ] Troubleshooting guide\n\n### 4. Developer Documentation (docs/developers/)\n- [ ] Architecture overview\n- [ ] Bullet Train conventions\n- [ ] Super scaffolding guide\n- [ ] Model relationships diagram\n- [ ] API authentication\n- [ ] WebSocket connections\n- [ ] Testing strategies\n- [ ] Performance considerations\n\n### 5. API Documentation\n- [ ] OpenAPI/Swagger spec (auto-generated)\n- [ ] Authentication guide\n- [ ] Rate limiting\n- [ ] Webhook documentation\n- [ ] Example requests/responses\n- [ ] SDKs and libraries\n- [ ] Postman collection\n\n### 6. Mobile Documentation (docs/mobile/)\n- [ ] iOS app setup\n- [ ] Android app setup\n- [ ] TestFlight distribution\n- [ ] Play Store internal testing\n- [ ] Native bridge documentation\n- [ ] Push notification setup\n\n### 7. Deployment Documentation (docs/deployment/)\n- [ ] Heroku deployment guide\n- [ ] Railway deployment guide\n- [ ] Environment variables\n- [ ] Database setup\n- [ ] Redis configuration\n- [ ] External services setup\n- [ ] SSL and domains\n- [ ] Scaling guidelines\n\n### Code Examples to Include:\n```ruby\n# Creating a Space\nspace = Space.create\\!(\n  team: current_team,\n  name: 'My Creator Space',\n  description: 'Exclusive content and streams'\n)\n\n# Creating an Access Pass\naccess_pass = space.access_passes.create\\!(\n  name: 'VIP Access',\n  price_cents: 2999,\n  pricing_type: 'monthly'\n)\n\n# Starting a stream\nstream = experience.streams.create\\!(\n  title: 'Live Q&A Session',\n  scheduled_at: 1.hour.from_now,\n  status: 'scheduled'\n)\n```\n\n### Additional Requirements:\n- [ ] JSDoc comments for JavaScript\n- [ ] YARD documentation for Ruby\n- [ ] Inline code comments\n- [ ] Architecture Decision Records (ADRs)\n- [ ] Changelog maintenance\n- [ ] Version documentation","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxIA","name":"ai/ready","description":"Ready for AI implementation","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKadzAg","name":"priority/high","description":"Important","color":"FFA500"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"},{"id":"LA_kwDOPu35oc8AAAACKad1Ww","name":"sprint/week-4","description":"Week 4 sprint","color":"FBCA04"}],"milestone":{"number":4,"title":"Week 4: Polish","description":"Testing, documentation, Hotwire Native, production prep.","dueOn":"2025-10-13T00:00:00Z"},"number":19,"title":"STORY 15: Documentation & README - User Guides & API Docs"},{"assignees":[],"body":"**User Story**: As a platform operator I want the application deployed to production so that users can access it\n\n**Acceptance Criteria:**\n- [ ] Application deployed to Heroku/Railway\n- [ ] PostgreSQL database configured\n- [ ] Redis configured for ActionCable & Sidekiq\n- [ ] Background job processing working\n- [ ] SSL certificates configured\n- [ ] Custom domain setup\n- [ ] CDN for assets (Cloudflare)\n- [ ] Error tracking (Honeybadger/Sentry)\n- [ ] Application monitoring\n- [ ] Backup strategy implemented\n\n**Infrastructure Checklist:**\n\n### Core Services:\n- [ ] Web dynos/containers scaled appropriately\n- [ ] Worker dynos for Sidekiq\n- [ ] PostgreSQL with connection pooling\n- [ ] Redis for caching and ActionCable\n- [ ] File storage (S3/R2 for uploads)\n\n### External Services:\n- [ ] LiveKit server configured\n- [ ] Mux account for video distribution\n- [ ] GetStream.io for chat\n- [ ] Stripe webhooks configured\n- [ ] SendGrid/Postmark for emails\n\n### Environment Variables:\n```yaml\nRAILS_MASTER_KEY: [from config/master.key]\nDATABASE_URL: [auto-provided]\nREDIS_URL: [auto-provided]\nBASE_URL: https://backstagepass.app\n\n# LiveKit\nLIVEKIT_API_KEY: xxx\nLIVEKIT_API_SECRET: xxx\nLIVEKIT_HOST: wss://xxx\n\n# Mux\nMUX_TOKEN_ID: xxx\nMUX_TOKEN_SECRET: xxx\n\n# GetStream\nGETSTREAM_API_KEY: xxx\nGETSTREAM_API_SECRET: xxx\n\n# Stripe\nSTRIPE_PUBLISHABLE_KEY: pk_live_xxx\nSTRIPE_SECRET_KEY: sk_live_xxx\nSTRIPE_WEBHOOK_SECRET: whsec_xxx\n\n# Email\nSENDGRID_API_KEY: xxx\n```\n\n### Security:\n- [ ] Secure headers configured\n- [ ] CORS properly configured\n- [ ] Rate limiting implemented\n- [ ] DDoS protection (Cloudflare)\n- [ ] Secrets rotated from development\n\n### Performance:\n- [ ] Database indexes optimized\n- [ ] N+1 queries eliminated (Bullet gem)\n- [ ] CDN configured for assets\n- [ ] Image optimization pipeline\n- [ ] Caching strategy implemented\n\n### Monitoring:\n- [ ] Application Performance Monitoring (APM)\n- [ ] Error tracking (Honeybadger/Sentry)\n- [ ] Uptime monitoring\n- [ ] Log aggregation\n- [ ] Custom metrics dashboard\n\n### Deployment Process:\n- [ ] GitHub Actions CI/CD pipeline\n- [ ] Automated testing before deploy\n- [ ] Database migration strategy\n- [ ] Zero-downtime deployments\n- [ ] Rollback procedure documented","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxIA","name":"ai/ready","description":"Ready for AI implementation","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKady0g","name":"priority/critical","description":"Blocking issues","color":"FF0000"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"},{"id":"LA_kwDOPu35oc8AAAACKad1Ww","name":"sprint/week-4","description":"Week 4 sprint","color":"FBCA04"}],"milestone":{"number":4,"title":"Week 4: Polish","description":"Testing, documentation, Hotwire Native, production prep.","dueOn":"2025-10-13T00:00:00Z"},"number":18,"title":"STORY 14: Production Deployment - Heroku/Railway Setup & Configuration"},{"assignees":[],"body":"**User Story**: As a developer I want comprehensive test coverage so that the platform is stable and reliable\n\n**Acceptance Criteria:**\n- [ ] 80%+ test coverage for models\n- [ ] System tests for all critical user flows\n- [ ] API endpoint tests for all routes\n- [ ] Integration tests for LiveKit streaming\n- [ ] Integration tests for Stripe payments\n- [ ] Integration tests for GetStream chat\n- [ ] Mobile-specific test scenarios\n- [ ] Performance benchmarks established\n\n**Critical Test Flows:**\n1. Creator onboarding and Space setup\n2. Access Pass creation and pricing\n3. User purchase flow with Stripe Elements\n4. Stream hosting with LiveKit\n5. Chat participation with GetStream\n6. Mobile app authentication\n7. Native video player functionality\n8. Waitlist approval workflow\n\n**Technical Requirements:**\n- Fix all failing tests from PRs\n- Use Magic Test for UI recording\n- Add Capybara system tests\n- Mock external services (LiveKit, Stripe, GetStream)\n- Add performance tests with derailed_benchmarks\n- CI/CD pipeline with parallel tests\n\n**Test Data:**\n- Proper Rails 8/Bullet Train seed data\n- Factory Bot factories for all models\n- Realistic test scenarios\n- Edge case coverage","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxIA","name":"ai/ready","description":"Ready for AI implementation","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKady0g","name":"priority/critical","description":"Blocking issues","color":"FF0000"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"},{"id":"LA_kwDOPu35oc8AAAACKad1Ww","name":"sprint/week-4","description":"Week 4 sprint","color":"FBCA04"}],"milestone":{"number":4,"title":"Week 4: Polish","description":"Testing, documentation, Hotwire Native, production prep.","dueOn":"2025-10-13T00:00:00Z"},"number":17,"title":"STORY 13: Comprehensive Test Suite - System & Integration Tests"}]
