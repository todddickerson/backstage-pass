[{"assignees":[],"body":"## User Story\nAs a **creator**, I want to **see how my content is performing** so that **I can make informed decisions**.\n\n## Acceptance Criteria\n- [ ] Can see total revenue\n- [ ] Can see number of active Access Passes\n- [ ] Can see stream viewer counts\n- [ ] Can see chat engagement metrics\n- [ ] Data refreshes daily (not real-time)\n\n## Technical Requirements\n- Add counter caches to relevant models\n- Create Analytics::DailySnapshot model for aggregation\n- Create DailyAnalyticsJob for data collection\n- Create Account::AnalyticsController for dashboard\n- Build simple dashboard views with charts\n\n## Implementation Steps\n1. Add counter caches to Space model\n2. Create analytics snapshot model\n3. Build daily aggregation job\n4. Create dashboard controller and views\n5. Add basic charting with Chartkick gem\n\n## Counter Caches to Add\n- Space: purchases_count, active_passes_count, total_revenue_cents\n- Stream: max_viewer_count, total_viewers, chat_messages_count\n- AccessPass: purchases_count, waitlist_entries_count\n\n## Dependencies\n- Requires Space, AccessPass, Stream models\n- Chartkick gem for simple charts\n\n## Priority\nLow for Phase 1 MVP - nice to have but not blocking","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxIA","name":"ai/ready","description":"Ready for AI implementation","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKadyEQ","name":"status/ready","description":"Ready for work","color":"2188FF"},{"id":"LA_kwDOPu35oc8AAAACKadzVA","name":"priority/low","description":"Nice to have","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"},{"id":"LA_kwDOPu35oc8AAAACKad0wQ","name":"component/ui","description":"Frontend","color":"C5DEF5"},{"id":"LA_kwDOPu35oc8AAAACKad1Ww","name":"sprint/week-4","description":"Week 4 sprint","color":"FBCA04"}],"milestone":{"number":4,"title":"Week 4: Polish","description":"Testing, documentation, Hotwire Native, production prep.","dueOn":"2025-10-13T00:00:00Z"},"number":38,"title":"[STORY 6] Basic Analytics: Creator Dashboard"},{"assignees":[],"body":"## User Story\nAs a **creator**, I want to **review and approve waitlist applications** so that **I can control who gets access**.\n\n## Acceptance Criteria\n- [ ] Can view pending waitlist entries\n- [ ] Can see applicant answers to custom questions\n- [ ] Can approve or reject applications one by one\n- [ ] Approved users receive email with access instructions\n- [ ] Can see history of approved/rejected applications\n\n## Technical Requirements\n- Create AccessPasses::WaitlistEntry model (namespaced)\n- Add custom_questions JSONB field to AccessPass\n- Add answers JSONB field to WaitlistEntry\n- Create Account::WaitlistEntriesController for management\n- Create Public::WaitlistEntriesController for applications\n- Add email notifications on approval/rejection\n- Add status enum: [:pending, :approved, :rejected]\n\n## Super Scaffold Commands\n```bash\n# Create WaitlistEntry model\nrails generate super_scaffold AccessPasses::WaitlistEntry AccessPass,Space,Team user:super_select{class_name=User} answers:text_area status:buttons approved_at:date_and_time_field\n\n# Add custom_questions to AccessPass\nrails generate super_scaffold:field AccessPass custom_questions:text_area\n```\n\n## Implementation Steps\n1. Create WaitlistEntry model with proper associations\n2. Add custom questions builder to AccessPass form\n3. Create public application form\n4. Build management interface for creators\n5. Add email notifications\n6. Create approval/rejection actions\n\n## Dependencies\n- Requires AccessPass model from Story 2\n- ActionMailer for notifications\n\n## Priority\nMedium for Phase 1 MVP - enables exclusive access control","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxIA","name":"ai/ready","description":"Ready for AI implementation","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKadyEQ","name":"status/ready","description":"Ready for work","color":"2188FF"},{"id":"LA_kwDOPu35oc8AAAACKadzKw","name":"priority/medium","description":"Standard priority","color":"FFFF00"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"},{"id":"LA_kwDOPu35oc8AAAACKad0aA","name":"component/models","description":"Data models","color":"B60205"},{"id":"LA_kwDOPu35oc8AAAACKad1PA","name":"sprint/week-3","description":"Week 3 sprint","color":"FBCA04"}],"milestone":{"number":3,"title":"Week 3: Marketplace","description":"Stripe payments, access passes, creator monetization.","dueOn":"2025-10-06T00:00:00Z"},"number":37,"title":"[STORY 5] Waitlist Management: Applications & Approval"},{"assignees":[],"body":"## User Story\nAs a **creator**, I want to **host live streams for my paying audience** so that **I can deliver exclusive content**.\n\n## Acceptance Criteria\n- [ ] Can schedule a stream with title and description\n- [ ] Can go live with webcam and screen share\n- [ ] Can see viewer count and chat\n- [ ] Can moderate chat (delete messages, ban users)\n- [ ] Can end stream and it saves as recording\n- [ ] Only users with valid Access Pass can view\n\n## Technical Requirements\n- Integrate LiveKit SDK for WebRTC streaming\n- Update Stream model with LiveKit room management\n- Create streaming UI with video controls\n- Integrate GetStream.io chat (already has ChatRoom model)\n- Add recording to Cloudflare R2 storage\n- Create Account::StreamsController for creator streaming\n- Create Account::ExperiencesController for viewer streaming\n\n## Implementation Steps\n1. Add livekit-server-sdk gem\n2. Create LiveKit room creation service\n3. Build streaming interface with Stimulus\n4. Connect GetStream chat to streaming rooms\n5. Add viewer access verification\n6. Implement recording storage\n\n## Dependencies\n- LiveKit API credentials configured\n- GetStream.io already integrated\n- Stream model already exists (needs LiveKit fields)\n- Requires AccessGrant for access verification\n\n## Priority\nHigh for Phase 1 MVP - core feature for live content delivery","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxIA","name":"ai/ready","description":"Ready for AI implementation","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKadyEQ","name":"status/ready","description":"Ready for work","color":"2188FF"},{"id":"LA_kwDOPu35oc8AAAACKadzAg","name":"priority/high","description":"Important","color":"FFA500"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"},{"id":"LA_kwDOPu35oc8AAAACKad0gQ","name":"component/streaming","description":"LiveKit/video","color":"0E8A16"},{"id":"LA_kwDOPu35oc8AAAACKad1JA","name":"sprint/week-2","description":"Week 2 sprint","color":"FBCA04"}],"milestone":{"number":2,"title":"Week 2: Streaming","description":"LiveKit integration, stream management, real-time features.","dueOn":"2025-09-29T00:00:00Z"},"number":36,"title":"[STORY 4] Live Streaming: LiveKit Integration"},{"assignees":[],"body":"## User Story\nAs a **viewer**, I want to **purchase an Access Pass** so that **I can access exclusive content**.\n\n## Acceptance Criteria\n- [ ] Can click \"Get Access\" on any Access Pass\n- [ ] If not logged in, enter email for passwordless auth\n- [ ] Receive 6-digit code via email\n- [ ] Complete purchase with credit card (Stripe Elements)\n- [ ] Immediately redirected to purchased content\n- [ ] Receive email confirmation\n\n## Technical Requirements\n- Create Billing::Purchase model (namespaced)\n- Create AccessGrant model to track user access to passes\n- Integrate Stripe Elements for payment processing\n- Implement passwordless authentication with OTP\n- Create Public::PurchasesController for checkout flow\n- Create Account::AccessPassesController for managing purchases\n\n## Implementation Steps\n1. Add Pay gem and configure Stripe\n2. Create Purchase and AccessGrant models\n3. Build checkout flow with Stripe Elements\n4. Add passwordless auth with email OTP\n5. Create purchase confirmation emails\n6. Add access verification to experiences\n\n## Dependencies\n- Stripe API keys configured\n- Pay gem for Stripe integration\n- Requires AccessPass model from Story 2\n\n## Priority\nCritical for Phase 1 MVP - monetization requires purchase flow","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxIA","name":"ai/ready","description":"Ready for AI implementation","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKadyEQ","name":"status/ready","description":"Ready for work","color":"2188FF"},{"id":"LA_kwDOPu35oc8AAAACKady0g","name":"priority/critical","description":"Blocking issues","color":"FF0000"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"},{"id":"LA_kwDOPu35oc8AAAACKad0nw","name":"component/payments","description":"Stripe/billing","color":"F9D0C4"},{"id":"LA_kwDOPu35oc8AAAACKad1JA","name":"sprint/week-2","description":"Week 2 sprint","color":"FBCA04"}],"milestone":{"number":2,"title":"Week 2: Streaming","description":"LiveKit integration, stream management, real-time features.","dueOn":"2025-09-29T00:00:00Z"},"number":35,"title":"[STORY 3] Purchase Flow: Stripe Integration & Checkout"},{"assignees":[],"body":"## User Story\nAs a **creator**, I want to **create different tiers of access passes** so that **I can offer various pricing options**.\n\n## Acceptance Criteria\n- [ ] Can create multiple Access Passes per Space\n- [ ] Can set pricing (free, one-time, monthly, yearly)\n- [ ] Can select which Experiences are included in each pass\n- [ ] Can set stock limits and expiration\n- [ ] Can enable waitlist with custom questions\n- [ ] Can preview sales page for each Access Pass\n\n## Technical Requirements\n- Create AccessPass model with complex pricing structure\n- Create Experience model for content/streams\n- Create AccessPassExperience join table (already exists, needs proper associations)\n- Integrate money-rails gem for price fields\n- Add pricing_type enum: [:free, :one_time, :monthly, :yearly]\n- Add stock management fields\n\n## Super Scaffold Commands\n```bash\n# Create Experience model\nrails generate super_scaffold Experience Space,Team title:text_field description:trix_editor experience_type:buttons scheduled_at:date_and_time_field\n\n# Create AccessPass model\nrails generate super_scaffold AccessPass Space,Team title:text_field description:trix_editor pricing_type:buttons price_cents:number_field stock_limit:number_field expires_at:date_and_time_field waitlist_enabled:boolean\n\n# Add associations in models\n```\n\n## Dependencies\n- money-rails gem\n- Requires Space model from Story 1\n\n## Priority\nCritical for Phase 1 MVP - core monetization feature","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxIA","name":"ai/ready","description":"Ready for AI implementation","color":"00FF00"},{"id":"LA_kwDOPu35oc8AAAACKadyEQ","name":"status/ready","description":"Ready for work","color":"2188FF"},{"id":"LA_kwDOPu35oc8AAAACKady0g","name":"priority/critical","description":"Blocking issues","color":"FF0000"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"},{"id":"LA_kwDOPu35oc8AAAACKad0aA","name":"component/models","description":"Data models","color":"B60205"},{"id":"LA_kwDOPu35oc8AAAACKad0nw","name":"component/payments","description":"Stripe/billing","color":"F9D0C4"},{"id":"LA_kwDOPu35oc8AAAACKad1Bw","name":"sprint/week-1","description":"Week 1 sprint","color":"FBCA04"}],"milestone":{"number":1,"title":"Week 1: Foundation","description":"Core models, authentication, routing setup. Bullet Train scaffolding.","dueOn":"2025-09-22T00:00:00Z"},"number":34,"title":"[STORY 2] Access Pass System: Products & Pricing"}]
