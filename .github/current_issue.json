{"assignees":[],"body":"## Overview\n\nComplete the viewer side of live streaming functionality. Backend LiveKit integration exists but viewer interface and access control need implementation.\n\n## User Story\n\n**As a** viewer with access  \n**I want to** watch live streams  \n**So that** I can consume the content I paid for\n\n## Acceptance Criteria\n\n### Core Viewing Experience\n- [ ] Can see upcoming and live streams in purchased Spaces\n- [ ] Can join live stream with one click  \n- [ ] Video plays smoothly with adaptive quality\n- [ ] Can participate in chat\n- [ ] Can use reactions/emojis\n- [ ] Can full-screen the video\n- [ ] Mobile-responsive video player\n\n### Access Control\n- [ ] Only users with valid Access Pass can view\n- [ ] Proper error messages for unauthorized access\n- [ ] Seamless authentication check before stream access\n- [ ] Grace period for recently expired passes\n\n### Stream Discovery  \n- [ ] Dashboard showing \"My Streams\" for purchased access passes\n- [ ] Upcoming stream notifications\n- [ ] Live stream indicators\n- [ ] Recently ended stream recordings (if available)\n\n## Technical Implementation\n\n### Models (Already Implemented)\n✅ Stream model with LiveKit integration exists\n✅ Access control methods available  \n✅ Stream status tracking (scheduled, live, ended)\n\n### Controllers Needed\n```ruby\n# app/controllers/account/purchased_spaces_controller.rb\nclass Account::PurchasedSpacesController < Account::ApplicationController\n  # Show user's purchased spaces and upcoming streams\nend\n\n# app/controllers/account/stream_viewing_controller.rb  \nclass Account::StreamViewingController < Account::ApplicationController\n  # Handle stream viewing with access control\n  \n  def show\n    # Verify user has access to stream\n    # Generate LiveKit viewer token\n    # Render streaming interface\n  end\n  \n  def video_token\n    # Generate LiveKit token for authenticated viewer\n  end\n  \n  def chat_token  \n    # Generate GetStream chat token\n  end\nend\n```\n\n### Views Needed\n```\napp/views/account/purchased_spaces/\n├── index.html.erb          # Dashboard of purchased content\n└── _stream_card.html.erb   # Stream preview cards\n\napp/views/account/stream_viewing/\n├── show.html.erb           # Main streaming page\n├── _video_player.html.erb  # LiveKit video component  \n└── _chat_panel.html.erb    # GetStream chat component\n```\n\n### Frontend Components\n- [ ] LiveKit video player integration\n- [ ] GetStream chat widget\n- [ ] Responsive video controls\n- [ ] Full-screen functionality\n- [ ] Mobile touch controls\n\n### Routes Integration\n```ruby\n# config/routes.rb additions\nnamespace :account do\n  resources :purchased_spaces, only: [:index]\n  \n  resources :streams, only: [:show], controller: 'stream_viewing' do\n    member do\n      get :video_token\n      get :chat_token\n    end\n  end\nend\n```\n\n## Access Control Logic\n\n### Purchase Verification\n```ruby\ndef verify_stream_access\n  @stream = Stream.find(params[:id])\n  @access_pass = @stream.experience.access_passes.find do |pass|\n    current_user.has_active_access?(pass)\n  end\n  \n  unless @access_pass\n    redirect_to public_space_path(@stream.experience.space.slug), \n                alert: \"Access required to view this stream\"\n  end\nend\n```\n\n### Token Generation\n```ruby\ndef generate_viewer_token\n  LiveKit::AccessToken.new(\n    api_key: Rails.application.credentials.livekit.api_key,\n    api_secret: Rails.application.credentials.livekit.api_secret\n  ).tap do |token|\n    token.identity = current_user.id.to_s\n    token.name = current_user.name\n    token.add_grant(LiveKit::VideoGrant.new(\n      room_join: true,\n      room: @stream.room_name\n    ))\n  end.to_jwt\nend\n```\n\n## Integration Points\n\n### LiveKit Integration\n- [ ] Viewer token generation with proper permissions\n- [ ] Room joining with participant limits\n- [ ] Video quality adaptation\n- [ ] Connection health monitoring\n\n### GetStream Chat\n- [ ] Viewer chat authentication\n- [ ] Real-time message sync\n- [ ] Chat moderation (viewer restrictions)  \n- [ ] Emoji reactions integration\n\n### Purchase System Integration\n- [ ] Verify active access passes\n- [ ] Handle subscription status\n- [ ] Grace period for expired access\n- [ ] Redirect to purchase if no access\n\n## Testing Requirements\n\n### System Tests\n```ruby\n# test/system/stream_viewing_test.rb\ntest \"viewer with access can join stream\"\ntest \"viewer without access is redirected to purchase\"\ntest \"chat functionality works for authenticated viewers\"\ntest \"video player loads and displays stream\"\ntest \"full-screen mode works\"\n```\n\n### Integration Tests\n```ruby\n# test/controllers/account/stream_viewing_controller_test.rb\ntest \"generates valid LiveKit token for authorized user\"\ntest \"denies access for unauthorized user\"\ntest \"handles expired access passes appropriately\"\n```\n\n## Dependencies\n\n### Hard Dependencies\n- ✅ LiveKit configuration (already exists)\n- ✅ GetStream configuration (already exists)\n- ✅ Stream model (already exists)\n- ❌ **Working payment processing** (Issue #45 - Critical)\n\n### Soft Dependencies  \n- User authentication system (✅ working)\n- Access pass purchase system (❌ needs fixing)\n- Email notification system (✅ working)\n\n## Mobile Considerations\n\n### Responsive Design\n- [ ] Mobile video player optimization\n- [ ] Touch-friendly controls\n- [ ] Portrait/landscape orientation handling\n- [ ] Chat overlay for small screens\n\n### Performance\n- [ ] Adaptive bitrate streaming\n- [ ] Connection quality indicators  \n- [ ] Graceful degradation for poor connections\n- [ ] Battery usage optimization\n\n## Success Metrics\n\n### Technical Metrics\n- Video load time < 3 seconds\n- Chat message latency < 500ms\n- Stream uptime > 99%\n- Mobile compatibility across devices\n\n### User Experience\n- Single-click stream joining\n- Intuitive video controls\n- Reliable chat functionality\n- Clear access messaging\n\n## Estimated Effort\n\n**3-4 days** including testing and mobile optimization\n\n## Definition of Done\n\n- [ ] All acceptance criteria met\n- [ ] Comprehensive test coverage\n- [ ] Mobile responsive design\n- [ ] Code reviewed and merged\n- [ ] Integration with purchase system working\n- [ ] Documentation updated\n\n## Next Steps After Completion\n\n1. Live Stream Hosting improvements (creator side)\n2. Recording playback functionality  \n3. Stream analytics and metrics\n4. Advanced chat features (reactions, moderation)\n\n## Related Issues\n\n- Depends on: #45 (Payment Processing)\n- Enables: Creator hosting improvements\n- Prepares: Mobile app streaming foundation","labels":[{"id":"LA_kwDOPu35oc8AAAACKadxOg","name":"ai/working","description":"AI currently working","color":"FFFF00"},{"id":"LA_kwDOPu35oc8AAAACKadyNQ","name":"status/executing","description":"In progress","color":"6F42C1"},{"id":"LA_kwDOPu35oc8AAAACKadzAg","name":"priority/high","description":"Important","color":"FFA500"},{"id":"LA_kwDOPu35oc8AAAACKadzdA","name":"type/feature","description":"New functionality","color":"0052CC"}],"milestone":null,"number":46,"title":"[STORY 8] Live Stream Viewing - Complete Viewer Experience"}
