#!/usr/bin/env bash

# Backstage Pass Railway Deployment Script
# Usage: bin/railway-deploy [environment]

set -e

ENVIRONMENT=${1:-production}

echo "üöÇ Deploying Backstage Pass to Railway ($ENVIRONMENT)"
echo "=================================================="

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to check if command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Check prerequisites
echo "üìã Checking prerequisites..."

if ! command_exists railway; then
  echo -e "${YELLOW}‚ö†Ô∏è  Railway CLI not installed. Installing...${NC}"
  if command_exists npm; then
    npm install -g @railway/cli
  elif command_exists yarn; then
    yarn global add @railway/cli
  else
    echo -e "${RED}‚ùå Need npm or yarn to install Railway CLI${NC}"
    echo "   Visit: https://docs.railway.app/develop/cli"
    exit 1
  fi
fi

if ! command_exists git; then
  echo -e "${RED}‚ùå Git not installed.${NC}"
  exit 1
fi

# Check if logged in to Railway
if ! railway whoami &>/dev/null; then
  echo -e "${YELLOW}‚ö†Ô∏è  Not logged in to Railway. Please login...${NC}"
  railway login
fi

# Check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
  echo -e "${RED}‚ùå You have uncommitted changes. Please commit or stash them first.${NC}"
  exit 1
fi

# Run tests
echo "üß™ Running tests..."
if ! bundle exec rails test; then
  echo -e "${RED}‚ùå Tests failed. Fix them before deploying.${NC}"
  exit 1
fi

# Run security checks
echo "üîí Running security audit..."
bundle exec bundler-audit check --update || true
bundle exec brakeman -q -w2 || true

# Check if project is linked
if [ ! -f ".railway" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  Project not linked to Railway. Please link...${NC}"
  railway link
fi

# Deploy to Railway
echo "üöÇ Deploying to Railway..."
railway up --detach

# Wait for deployment
echo "‚è≥ Waiting for deployment to complete..."
sleep 30

# Check deployment status
echo "üìä Checking deployment status..."
railway status

# Get the deployment URL
DEPLOYMENT_URL=$(railway domain 2>/dev/null | head -1 || echo "https://your-app.railway.app")

# Health check
echo "üè• Running health check..."
HEALTH_URL="${DEPLOYMENT_URL}/health"

# Try health check a few times
for i in {1..5}; do
  if curl -f -s "$HEALTH_URL" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Health check passed!${NC}"
    break
  else
    echo -e "${YELLOW}‚ö†Ô∏è  Health check attempt $i failed, retrying...${NC}"
    sleep 10
  fi
  
  if [ $i -eq 5 ]; then
    echo -e "${RED}‚ùå Health check failed after 5 attempts${NC}"
    echo "   Check: $HEALTH_URL"
    echo "   View logs: railway logs"
  fi
done

# Show logs (last 50 lines)
echo "üìú Recent logs:"
railway logs --tail 50

echo ""
echo -e "${GREEN}‚úÖ Deployment to Railway complete!${NC}"
echo "üåê App URL: $DEPLOYMENT_URL"
echo ""
echo "üìù Post-deployment checklist:"
echo "  [ ] Verify app is working: $DEPLOYMENT_URL"
echo "  [ ] Check health endpoint: $HEALTH_URL"
echo "  [ ] Test critical user flows"
echo "  [ ] Monitor Railway dashboard"
echo ""
echo "üí° Useful commands:"
echo "  railway logs          - View logs"
echo "  railway ps            - View running services"
echo "  railway shell         - Open shell in container"
echo "  railway run rails c   - Open Rails console"
echo "  railway variables     - Manage environment variables"

# Optional: Open app in browser
read -p "Open app in browser? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  if command_exists open; then
    open "$DEPLOYMENT_URL"
  elif command_exists xdg-open; then
    xdg-open "$DEPLOYMENT_URL"
  else
    echo "Open manually: $DEPLOYMENT_URL"
  fi
fi