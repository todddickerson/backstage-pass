#!/usr/bin/env bash

# Backstage Pass Production Deployment Script
# Usage: bin/deploy [staging|production]

set -e

ENVIRONMENT=${1:-staging}
BRANCH=${2:-main}

echo "🚀 Deploying Backstage Pass to $ENVIRONMENT from branch $BRANCH"
echo "=========================================="

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Verify prerequisites
echo "📋 Checking prerequisites..."
if ! command_exists heroku; then
  echo -e "${RED}❌ Heroku CLI not installed. Please install it first.${NC}"
  echo "   Visit: https://devcenter.heroku.com/articles/heroku-cli"
  exit 1
fi

if ! command_exists git; then
  echo -e "${RED}❌ Git not installed.${NC}"
  exit 1
fi

# Set app name based on environment
case $ENVIRONMENT in
  production)
    APP_NAME="backstage-pass-production"
    ;;
  staging)
    APP_NAME="backstage-pass-staging"
    ;;
  *)
    echo -e "${RED}❌ Invalid environment. Use 'staging' or 'production'${NC}"
    exit 1
    ;;
esac

echo "📱 Deploying to Heroku app: $APP_NAME"

# Check if we're on the correct branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "$BRANCH" ]; then
  echo -e "${YELLOW}⚠️  You're on branch '$CURRENT_BRANCH', but deploying from '$BRANCH'${NC}"
  read -p "Do you want to checkout $BRANCH? (y/n) " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    git checkout $BRANCH
    git pull origin $BRANCH
  else
    echo -e "${RED}❌ Deployment cancelled${NC}"
    exit 1
  fi
fi

# Check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
  echo -e "${RED}❌ You have uncommitted changes. Please commit or stash them first.${NC}"
  exit 1
fi

# Pull latest changes
echo "📥 Pulling latest changes..."
git pull origin $BRANCH

# Run tests (optional but recommended)
echo "🧪 Running tests..."
if ! bundle exec rails test; then
  echo -e "${RED}❌ Tests failed. Fix them before deploying.${NC}"
  exit 1
fi

# Run security checks
echo "🔒 Running security audit..."
bundle exec bundler-audit check --update || true
bundle exec brakeman -q -w2 || true

# Precompile assets
echo "📦 Precompiling assets..."
RAILS_ENV=production bundle exec rails assets:precompile

# Deploy to Heroku
echo "🚀 Deploying to Heroku..."
git push heroku $BRANCH:main --force

# Run database migrations
echo "🗄️ Running database migrations..."
heroku run rails db:migrate --app $APP_NAME

# Clear cache
echo "🧹 Clearing cache..."
heroku run rails cache:clear --app $APP_NAME

# Restart dynos
echo "🔄 Restarting dynos..."
heroku restart --app $APP_NAME

# Check deployment status
echo "✅ Checking deployment status..."
heroku ps --app $APP_NAME

# Run health check
echo "🏥 Running health check..."
APP_URL=$(heroku info --app $APP_NAME -s | grep web_url | cut -d= -f2)
HEALTH_CHECK_URL="${APP_URL}health"

sleep 5  # Give the app time to start

if curl -f -s -o /dev/null -w "%{http_code}" "$HEALTH_CHECK_URL" | grep -q "200"; then
  echo -e "${GREEN}✅ Health check passed!${NC}"
else
  echo -e "${YELLOW}⚠️  Health check failed or returned non-200 status${NC}"
  echo "   Check: $HEALTH_CHECK_URL"
fi

# Show app info
echo ""
echo "📊 Deployment Summary:"
echo "======================"
heroku info --app $APP_NAME

# Show recent logs
echo ""
echo "📜 Recent logs:"
heroku logs --tail --app $APP_NAME -n 50

echo ""
echo -e "${GREEN}✅ Deployment to $ENVIRONMENT complete!${NC}"
echo "🌐 App URL: $APP_URL"
echo ""
echo "📝 Post-deployment checklist:"
echo "  [ ] Verify all features are working"
echo "  [ ] Check error tracking dashboard"
echo "  [ ] Monitor performance metrics"
echo "  [ ] Test critical user flows"

# Optional: Open app in browser
read -p "Open app in browser? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  heroku open --app $APP_NAME
fi