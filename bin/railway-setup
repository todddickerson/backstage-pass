#!/usr/bin/env bash

# Backstage Pass Railway Setup Script
# Reads variables from application.yml and sets them in Railway

set -e

echo "üöÇ Setting up Backstage Pass on Railway"
echo "======================================="

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if railway CLI is installed
if ! command -v railway &> /dev/null; then
  echo -e "${YELLOW}‚ö†Ô∏è  Railway CLI not installed. Installing...${NC}"
  npm install -g @railway/cli
fi

# Check if logged in
if ! railway whoami &>/dev/null; then
  echo -e "${YELLOW}üîë Please login to Railway...${NC}"
  railway login
fi

# Check if project exists or create new one
if [ ! -f ".railway" ]; then
  echo -e "${BLUE}üöÇ Creating new Railway project...${NC}"
  echo "   Project name: backstage-pass"
  railway init
else
  echo -e "${GREEN}‚úÖ Railway project already linked${NC}"
fi

# Function to read YAML values
get_yaml_value() {
  local key=$1
  local file="config/application.yml"
  
  if [ -f "$file" ]; then
    grep "^${key}:" "$file" | cut -d' ' -f2- | tr -d '"' | tr -d "'"
  fi
}

# Function to set Railway variable safely
set_railway_var() {
  local key=$1
  local value=$2
  
  if [ -n "$value" ] && [ "$value" != "" ]; then
    echo "  Setting $key..."
    railway variables set "$key=$value" || echo "    ‚ö†Ô∏è Failed to set $key"
  else
    echo "  ‚ö†Ô∏è Skipping $key (empty value)"
  fi
}

echo -e "${BLUE}üìù Reading variables from config/application.yml...${NC}"

# Core Rails variables
echo -e "${BLUE}üîß Setting core Rails variables...${NC}"
BASE_URL=$(get_yaml_value "BASE_URL")
# Convert localhost to production URL for Railway
if [[ "$BASE_URL" == *"localhost"* ]]; then
  BASE_URL="https://backstage-pass-production.up.railway.app"
fi
set_railway_var "BASE_URL" "$BASE_URL"

MARKETING_SITE_URL=$(get_yaml_value "MARKETING_SITE_URL")
set_railway_var "MARKETING_SITE_URL" "$MARKETING_SITE_URL"

# Set production Rails environment
set_railway_var "RAILS_ENV" "production"
set_railway_var "NODE_ENV" "production"
set_railway_var "RAILS_LOG_TO_STDOUT" "enabled"
set_railway_var "RAILS_SERVE_STATIC_FILES" "enabled"

# Rails master key
if [ -f "config/master.key" ]; then
  echo "  Setting RAILS_MASTER_KEY from config/master.key..."
  RAILS_MASTER_KEY=$(cat config/master.key)
  set_railway_var "RAILS_MASTER_KEY" "$RAILS_MASTER_KEY"
else
  echo -e "${RED}‚ùå config/master.key not found! Generate with: rails credentials:edit${NC}"
fi

# Generate SECRET_KEY_BASE if not exists
echo "  Generating SECRET_KEY_BASE..."
SECRET_KEY_BASE=$(bundle exec rails runner "puts Rails.application.secret_key_generator.generate_key")
set_railway_var "SECRET_KEY_BASE" "$SECRET_KEY_BASE"

# GetStream.io (Chat)
echo -e "${BLUE}üí¨ Setting GetStream.io variables...${NC}"
set_railway_var "GETSTREAM_APP_ID" "$(get_yaml_value 'GETSTREAM_APP_ID')"
set_railway_var "GETSTREAM_API_KEY" "$(get_yaml_value 'GETSTREAM_API_KEY')"
set_railway_var "GETSTREAM_API_SECRET" "$(get_yaml_value 'GETSTREAM_API_SECRET')"

# Stripe (Payments)
echo -e "${BLUE}üí≥ Setting Stripe variables...${NC}"
set_railway_var "STRIPE_CONNECT_CLIENT_ID" "$(get_yaml_value 'STRIPE_CONNECT_CLIENT_ID')"
set_railway_var "STRIPE_PUBLISHABLE_KEY" "$(get_yaml_value 'STRIPE_PUBLISHABLE_KEY')"
set_railway_var "STRIPE_SECRET_KEY" "$(get_yaml_value 'STRIPE_SECRET_KEY')"

# LiveKit (Video Streaming)
echo -e "${BLUE}üìπ Setting LiveKit variables...${NC}"
set_railway_var "LIVEKIT_PROJECT_ID" "$(get_yaml_value 'LIVEKIT_PROJECT_ID')"
set_railway_var "LIVEKIT_SIP_URI" "$(get_yaml_value 'LIVEKIT_SIP_URI')"
LIVEKIT_URL=$(get_yaml_value 'LIVEKIT_URL')
set_railway_var "LIVEKIT_URL" "$LIVEKIT_URL"
set_railway_var "LIVEKIT_HOST" "$LIVEKIT_URL"  # Some code expects LIVEKIT_HOST
set_railway_var "LIVEKIT_API_KEY" "$(get_yaml_value 'LIVEKIT_API_KEY')"
set_railway_var "LIVEKIT_API_SECRET" "$(get_yaml_value 'LIVEKIT_API_SECRET')"

# Mux (Video Processing)
echo -e "${BLUE}üé¨ Setting Mux variables...${NC}"
set_railway_var "MUX_TOKEN_ID" "$(get_yaml_value 'MUX_TOKEN_ID')"
set_railway_var "MUX_TOKEN_SECRET" "$(get_yaml_value 'MUX_TOKEN_SECRET')"

# Performance settings
echo -e "${BLUE}‚ö° Setting performance variables...${NC}"
set_railway_var "WEB_CONCURRENCY" "2"
set_railway_var "RAILS_MAX_THREADS" "5"
set_railway_var "BUNDLE_WITHOUT" "development:test"

# Add PostgreSQL and Redis services
echo -e "${BLUE}üóÑÔ∏è Adding database services...${NC}"
echo "   üí° Add these services manually in Railway dashboard:"
echo "   1. Go to https://railway.app/dashboard"
echo "   2. Select your project"
echo "   3. Add services: PostgreSQL 15 and Redis 7"
echo "   4. Railway will automatically set DATABASE_URL and REDIS_URL"

# Show current variables
echo -e "${BLUE}üìä Current Railway variables:${NC}"
railway variables || echo "   ‚ö†Ô∏è Could not fetch variables"

echo ""
echo -e "${GREEN}‚úÖ Railway setup complete!${NC}"
echo ""
echo "üìã Next steps:"
echo "  1. Add PostgreSQL and Redis services in Railway dashboard"
echo "  2. Deploy: railway up"
echo "  3. Run migrations: railway run rails db:migrate"
echo "  4. Check health: https://your-app.up.railway.app/health"
echo ""
echo "üöÄ Deploy now? (y/n)"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
  echo -e "${BLUE}üöÄ Deploying to Railway...${NC}"
  railway up
  
  echo -e "${BLUE}üóÑÔ∏è Running database setup...${NC}"
  sleep 30  # Wait for deployment
  railway run rails db:create || echo "   Database might already exist"
  railway run rails db:migrate
  
  echo -e "${GREEN}‚úÖ Deployment complete!${NC}"
  echo "üåê Check your app: railway url"
fi